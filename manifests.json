[{"id": "all-minilm-l6-v2", "name": "All-MiniLM-L6-v2", "description": "All-MiniLM-L6-v2 is a sentence-transformers model designed to map sentences and paragraphs to a 384-dimensional dense vector space, ideal for clustering or semantic search tasks. Developed during Hugging Face's Community week, this model is fine-tuned on a 1B sentence pairs dataset with a contrastive learning objective. It excels in encoding short texts, capturing semantic information, and is useful for information retrieval, clustering, or sentence similarity tasks. [Learn More](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2)", "documentation": "<h1>Documentation</h1>\n<h2>Description</h2>\n<p>All-MiniLM-L6-v2 is a sentence-transformers model designed to map sentences and paragraphs to a 384-dimensional dense vector space, ideal for clustering or semantic search tasks. Developed during Hugging Face's Community week, this model is fine-tuned on a 1B sentence pairs dataset with a contrastive learning objective. It excels in encoding short texts, capturing semantic information, and is useful for information retrieval, clustering, or sentence similarity tasks. <a href=\"https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2\">Learn More</a></p>\n<h2>Hardware Requirements</h2>\n<h2>Example Usage</h2>\n<h2>Fine Tuning Instructions &amp; Cost</h2>\n<h2>Inference Benchmarks</h2>", "icon": "/logos/embeddings-all-minilm-l6-v2/logo.svg", "modelInfo": {"maxLength": 12000, "tokenLimit": 4000, "memoryRequirements": "8gb", "inferenceTime": "5 tokens per second"}, "devices": ["cpu", "gpu"], "dockerImages": {"cpu": {"image": "ghcr.io/premai-io/embeddings-all-minilm-l6-v2-cpu:latest"}, "gpu": {"image": "ghcr.io/premai-io/embeddings-all-minilm-l6-v2-gpu:latest"}}, "interfaces": ["embeddings"], "defaultPort": 8001}, {"id": "dolly-v2-12", "name": "Dolly-v2-12b", "description": "Dolly-v2-12b, developed by Databricks, is an instruction-following large language model trained on diverse capability domains. It exhibits remarkable instruction following behavior, surpassing the foundation model it's based on, Pythia-12b. The model is particularly designed for commercial use and its inference can be run on various GPU configurations. [Learn More](https://huggingface.co/databricks/dolly-v2-12b)", "documentation": "<h1>Documentation</h1>\n<h2>Description</h2>\n<p>Dolly-v2-12b, developed by Databricks, is an instruction-following large language model trained on diverse capability domains. It exhibits remarkable instruction following behavior, surpassing the foundation model it's based on, Pythia-12b. The model is particularly designed for commercial use and its inference can be run on various GPU configurations. <a href=\"https://huggingface.co/databricks/dolly-v2-12b\">Learn More</a></p>\n<h2>Hardware Requirements</h2>\n<h2>Example Usage</h2>\n<h2>Fine Tuning Instructions &amp; Cost</h2>\n<h2>Inference Benchmarks</h2>", "icon": "/logos/chat-dolly-v2-12b/logo.svg", "modelInfo": {"maxLength": 12000, "tokenLimit": 4000, "memoryRequirements": "24gb", "inferenceTime": "5 tokens per second"}, "interfaces": ["chat"], "dockerImages": {"gpu": {"image": "ghcr.io/premai-io/chat-dolly-v2-12b-gpu:latest"}}, "defaultPort": 8001}, {"id": "qdrant", "name": "Qdrant", "description": "Qdrant is a vector similarity search engine designed for storing, searching, and managing points along with their respective payloads. Built with an emphasis on extensive filtering, it is particularly beneficial for neural network matching, semantic-based matching, and faceted search. Qdrant offers various deployment options including local mode, on-premise server deployment, and Qdrant Cloud, each catering to different use-case scenarios. [Learn More](https://qdrant.tech/documentation/)", "documentation": "<h1>Documentation</h1>\n<h2>Description</h2>\n<p>Qdrant is a vector similarity search engine designed for storing, searching, and managing points along with their respective payloads. Built with an emphasis on extensive filtering, it is particularly beneficial for neural network matching, semantic-based matching, and faceted search. Qdrant offers various deployment options including local mode, on-premise server deployment, and Qdrant Cloud, each catering to different use-case scenarios. <a href=\"https://qdrant.tech/documentation/\">Learn More</a></p>\n<h2>Hardware Requirements</h2>\n<h2>Example Usage</h2>\n<h2>Fine Tuning Instructions &amp; Cost</h2>\n<h2>Inference Benchmarks</h2>", "interfaces": ["store"], "icon": "/logos/store-qdrant/logo.svg", "modelInfo": {}, "dockerImages": {"cpu": {"image": "qdrant/qdrant:v1.0.3"}}, "defaultPort": 6333}, {"id": "gpt4all-lora-q4", "name": "GPT4ALL-Lora Q4", "icon": "/logos/chat-gpt4all-lora-q4/logo.svg", "description": "GPT4All, developed by Nomic AI, is a chatbot trained over an extensive corpus of assistant interactions. By finetuning LLaMA 7B, GPT4All provides an open-source ecosystem to train and deploy efficient, assistant-style large language models locally on consumer-grade CPUs. This democratized approach to AI aims to bolster open research, reproducibility, and promote developments in AI alignment and interpretability. The current model has been 4-bit quantized using ggml framework. [Learn More](https://github.com/nomic-ai/gpt4all).", "documentation": "<h1>Documentation</h1>\n<h2>Description</h2>\n<p>GPT4All, developed by Nomic AI, is a chatbot trained over an extensive corpus of assistant interactions. By finetuning LLaMA 7B, GPT4All provides an open-source ecosystem to train and deploy efficient, assistant-style large language models locally on consumer-grade CPUs. This democratized approach to AI aims to bolster open research, reproducibility, and promote developments in AI alignment and interpretability. The current model has been 4-bit quantized using ggml framework. <a href=\"https://github.com/nomic-ai/gpt4all\">Learn More</a>.</p>\n<h2>Hardware Requirements</h2>\n<h2>Example Usage</h2>\n<h2>Fine Tuning Instructions &amp; Cost</h2>\n<h2>Inference Benchmarks</h2>\n<h2>Quality Benchmarks</h2>", "modelInfo": {"maxLength": 12000, "tokenLimit": 4000, "weightsName": "vicuna-7b-q4.bin", "weightsSize": 4212859520, "memoryRequirements": "8gb", "inferenceTime": "5 tokens per second"}, "interfaces": ["chat", "embeddings"], "dockerImages": {"cpu": {"image": "ghcr.io/premai-io/chat-gpt4all-lora-q4-cpu:latest"}}, "defaultPort": 8002}, {"id": "vicuna-7b-q4", "name": "Vicuna 7B Q4", "description": "Vicuna is an open-source chatbot, fine-tuned on LLaMA using conversations from ShareGPT. Developed collaboratively by a team from UC Berkeley, CMU, Stanford, and UC San Diego, this auto-regressive language model aims to advance research in large language models and chatbots. Primarily designed for researchers and hobbyists in AI and NLP, the model undergoes preliminary evaluations using diverse questions and GPT-4 for output judgment. The current model has been 4-bit quantized using ggml framework. [Learn More](https://vicuna.lmsys.org/)", "documentation": "<h1>Documentation</h1>\n<h2>Description</h2>\n<p>Vicuna is an open-source chatbot, fine-tuned on LLaMA using conversations from ShareGPT. Developed collaboratively by a team from UC Berkeley, CMU, Stanford, and UC San Diego, this auto-regressive language model aims to advance research in large language models and chatbots. Primarily designed for researchers and hobbyists in AI and NLP, the model undergoes preliminary evaluations using diverse questions and GPT-4 for output judgment. The current model has been 4-bit quantized using ggml framework. <a href=\"https://vicuna.lmsys.org/\">Learn More</a></p>\n<h2>Hardware Requirements</h2>\n<h2>Example Usage</h2>\n<h2>Fine Tuning Instructions &amp; Cost</h2>\n<h2>Inference Benchmarks</h2>", "icon": "/logos/chat-vicuna-7b-q4/logo.svg", "modelInfo": {"maxLength": 12000, "tokenLimit": 4000, "weightsName": "vicuna-7b-q4.bin", "weightsSize": 4212859520, "memoryRequirements": "8gb", "inferenceTime": "5 tokens per second"}, "interfaces": ["chat", "embeddings"], "dockerImages": {"cpu": {"image": "ghcr.io/premai-io/chat-vicuna-7b-q4-cpu:latest"}}, "defaultPort": 8001}, {"id": "redis", "name": "Redis", "description": "Redis, short for Remote Dictionary Server, serves as a multifunctional in-memory data structure store. It functions as a distributed key-value database, cache, and message broker, all operating in-memory for high-speed data access. With optional durability, Redis ensures data persistence despite potential system failures. [Learn More](https://redis.com/solutions/use-cases/vector-database/)", "documentation": "<h1>Documentation</h1>\n<h2>Description</h2>\n<p>Redis, short for Remote Dictionary Server, serves as a multifunctional in-memory data structure store. It functions as a distributed key-value database, cache, and message broker, all operating in-memory for high-speed data access. With optional durability, Redis ensures data persistence despite potential system failures. <a href=\"https://redis.com/solutions/use-cases/vector-database/\">Learn More</a></p>\n<h2>Hardware Requirements</h2>\n<h2>Example Usage</h2>\n<h2>Fine Tuning Instructions &amp; Cost</h2>\n<h2>Inference Benchmarks</h2>", "interfaces": ["store"], "icon": "/logos/store-redis/logo.svg", "modelInfo": {}, "dockerImages": {"cpu": {"image": "redis/redis-stack-server:latest"}}, "defaultPort": 6379}]